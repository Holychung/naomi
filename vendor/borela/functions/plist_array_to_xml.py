# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

from lxml.etree import (
    Element,
    SubElement,
)


def plist_array_to_xml(node, parent=None):
    """
    Convert a plist array(generated by “dict_to_plist_array”) to a XML tree that
    represents the plist.
    """

    # If no parent exists, link the current node to a:
    #   <plist version="1.0">
    if parent is None:
        parent = Element('plist')
        parent.attrib['version'] = '1.0'
        node = {
            'key': 'plist',
            'dict': node,
        }
    else:
        key = SubElement(parent, 'key')
        key.text = node['key']

    # Sublist.
    if isinstance(node, tuple) or isinstance(node, list):
        for n in node:
            plist_array_to_xml(n, parent)
        return parent

    # Create an element for the key and node’s value.
    if 'string' in node:
        new_node = SubElement(parent, 'string')
        new_node.text = node['string']
    elif 'integer' in node:
        new_node = SubElement(parent, 'integer')
        new_node.text = str(node['integer'])
    elif 'bool' in node:
        if node['bool']:
            SubElement(parent, 'true')
        else:
            SubElement(parent, 'false')
    elif 'dict' in node:
        new_node = SubElement(parent, 'dict')
        for item in node['dict']:
            plist_array_to_xml(item, new_node)
    else:
        raise ValueError('Unsupported node “%s”.' % node)

    return parent
